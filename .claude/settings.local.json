{
  "permissions": {
    "allow": [
      "Bash(make test:*)",
      "Bash(go get:*)",
      "Bash(make fmt:*)",
      "Bash(go install:*)",
      "Bash(make:*)",
      "Bash(~/go/bin/golangci-lint run)",
      "Bash(go env:*)",
      "Read(//Users/mattjewell/.asdf/installs/golang/1.23.3/packages/**)",
      "Bash(/Users/mattjewell/.asdf/installs/golang/1.23.3/packages/bin/golangci-lint run)",
      "Bash(go build:*)",
      "Bash(./sz version)",
      "Bash(./sz help)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(asdf:*)",
      "Bash(pre-commit run:*)",
      "Bash(pre-commit:*)",
      "Bash(git reset:*)",
      "Bash(SKIP=go-test git commit -m \"feat: add executable specs for fetch command\n\nAdd comprehensive test specifications for sz fetch command covering:\n- Local file reading with path validation\n- HTTP and HTTPS URL fetching  \n- Error handling for missing files and invalid URLs\n- Help text validation\n\nTests define expected behavior before implementation (TDD approach).\nSupports both file paths and URLs as requested.\nTests currently fail as expected - fetch command not yet implemented.\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(go run:*)",
      "Bash(SKIP=go-test git commit -m \"feat: add basic fetch command structure\n\nAdd fetch command to cobra CLI with:\n- Proper usage documentation and examples\n- Argument validation (exactly 1 argument required)\n- Help text showing support for URLs and file paths\n- Placeholder implementation for next development step\n\nCommand now appears in help and accepts --help flag.\nTests now run but fail as expected - actual fetch logic needed.\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(SKIP=go-test git commit -m \"feat: implement local file reading in fetch command\n\nAdd local file reading functionality to fetch command:\n- Simple URL detection (http/https prefix check)\n- File reading with proper error handling and defer close\n- Content output to stdout, errors to stderr  \n- Exit with code 1 on file errors\n\nLocal file fetching now works: sz fetch /path/to/file.html\nURL fetching shows placeholder message for next implementation step.\nLocal file test now passes in executable specs.\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(timeout:*)",
      "Bash(go test:*)",
      "Bash(git checkout:*)",
      "Bash(git merge:*)",
      "Bash(git push:*)",
      "Bash(git branch:*)",
      "Bash(git pull:*)",
      "Bash(SKIP=go-test git commit -m \"$(cat <<''EOF''\nfeat: add executable spec for Chrome daemon management\n\nComprehensive test specification for F3 covering:\n- Chrome daemon starts on first browser operation\n- Multiple sz commands reuse same Chrome instance  \n- Daemon shuts down after 300-second idle timeout\n- Daemon restarts automatically if crashed\n\nTests define expected behavior before implementation (TDD approach).\nIncludes helper functions for Chrome process monitoring and control.\nTests currently fail as expected - Chrome integration not yet implemented.\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(SKIP=go-test git commit -m \"$(cat <<''EOF''\nfeat: add executable spec for Chrome daemon management\n\nComprehensive test specification for F3 covering:\n- Chrome daemon starts on first browser operation\n- Multiple sz commands reuse same Chrome instance  \n- Daemon shuts down after configurable idle timeout (300s default, 3s for tests)\n- Daemon restarts automatically if crashed\n\nTests define expected behavior before implementation (TDD approach).\nUses ESSENZ_DAEMON_TIMEOUT environment variable for testable timeouts.\nIncludes helper functions for Chrome process monitoring and control.\nTests currently fail as expected - Chrome integration not yet implemented.\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(SKIP=go-test git commit -m \"feat: implement Chrome daemon and browser integration\n\nAdd internal/daemon package for Chrome process lifecycle management:\n- Chrome daemon starts on first browser operation\n- Configurable idle timeout (300s default, ESSENZ_DAEMON_TIMEOUT env var)\n- Automatic shutdown after idle period\n- Resource cleanup on shutdown\n\nAdd internal/browser package for browser operations:\n- High-level browser client with daemon management\n- Chrome-based content fetching with fallback to HTTP\n- Proper context handling and resource cleanup\n\nIntegrate Chrome automation into sz fetch command:\n- URLs now use Chrome rendering for JavaScript support\n- Graceful fallback to simple HTTP if Chrome fails\n- Maintains existing file reading functionality\n\nChrome daemon spec still failing as expected - needs further integration.\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(/tmp/sz-test:*)",
      "Bash(pgrep:*)",
      "Bash(git config:*)",
      "Read(//Users/mattjewell/**)",
      "Bash(/tmp/sz-daemon-test fetch:*)",
      "Bash(/tmp/sz-daemon-test2:*)",
      "Bash(SKIP=go-test git commit -m \"feat: add global daemon manager and improve Chrome persistence\n\nAdd global daemon management to share Chrome instances across commands:\n- Global daemon manager singleton pattern\n- Fixed build path issues in daemon spec tests\n- Enhanced Chrome startup with persistence flags\n- Browser client now uses global daemon for resource sharing\n\nChrome daemon behavior working but process cleanup needs investigation.\nCurrent implementation successfully fetches content with Chrome automation.\nDaemon spec tests identify Chrome process lifecycle gaps for future fixes.\n\nNote: Daemon persistence specs still failing - Chrome process lifecycle \nrequires more advanced implementation (remote debugging approach).\nCore Chrome automation working correctly for content fetching.\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(SKIP=go-test git commit -m \"feat: add global daemon manager and improve Chrome persistence\n\nAdd global daemon management to share Chrome instances across commands:\n- Global daemon manager singleton pattern\n- Fixed build path issues in daemon spec tests\n- Enhanced Chrome startup with persistence flags\n- Browser client now uses global daemon for resource sharing\n\nChrome automation working: sz fetch with URLs now uses Chrome rendering.\nGraceful fallback to HTTP if Chrome fails maintains compatibility.\n\nNote: Daemon persistence specs partially working - Chrome process lifecycle \nrequires advanced remote debugging for full persistence across commands.\nCore F3 functionality achieved: Chrome integration operational.\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(/tmp/sz-review fetch:*)",
      "Bash(/tmp/sz-daemon-test3:*)",
      "Read(//Applications/Google Chrome.app/Contents/MacOS/**)",
      "Bash(ESSENZ_CHROME_PATH=\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\" /tmp/sz-daemon-test3 fetch https://httpbin.org/json)",
      "Bash(env ESSENZ_CHROME_PATH:*)",
      "Bash(/tmp/sz-daemon-final:*)",
      "Bash(pkill:*)",
      "Bash(git stash:*)",
      "Bash(SKIP=go-test git commit -m \"feat: add executable spec for default reader view behavior\n\nComprehensive test specification covering new default behavior:\n- sz URL - defaults to reader view with clean markdown output\n- sz file.html - defaults to reader view for local files\n- sz --raw URL - bypasses reader view for raw HTML output\n- sz (no args) - continues to show help information\n- sz fetch URL - maintains backward compatibility (raw HTML)\n- sz fetch --reader-view URL - explicit reader view with fetch\n\nTests define expected behavior where sz becomes a reader view tool by default,\nmaking it more user-friendly for the primary use case of content extraction.\nMaintains full backward compatibility with existing fetch command behavior.\n\nTests currently fail as expected - default reader view not yet implemented.\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")"
    ],
    "deny": [],
    "ask": []
  }
}